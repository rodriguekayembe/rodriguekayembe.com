#!/usr/bin/env node
var Re=Object.create;var F=Object.defineProperty,Ce=Object.defineProperties,De=Object.getOwnPropertyDescriptor,Fe=Object.getOwnPropertyDescriptors,_e=Object.getOwnPropertyNames,U=Object.getOwnPropertySymbols,Oe=Object.getPrototypeOf,J=Object.prototype.hasOwnProperty,je=Object.prototype.propertyIsEnumerable;var N=(t,e,s)=>e in t?F(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s,y=(t,e)=>{for(var s in e||(e={}))J.call(e,s)&&N(t,s,e[s]);if(U)for(var s of U(e))je.call(e,s)&&N(t,s,e[s]);return t},b=(t,e)=>Ce(t,Fe(e)),ke=t=>F(t,"__esModule",{value:!0});var Le=(t,e,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of _e(e))!J.call(t,r)&&r!=="default"&&F(t,r,{get:()=>e[r],enumerable:!(s=De(e,r))||s.enumerable});return t},l=t=>Le(ke(F(t!=null?Re(Oe(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var xe=l(require("sade")),Pe=l(require("esbuild-register/dist/node"));var He="presta",$e="0.46.1",Me="Hyper minimal framework for the modern web.",Te="./index.js",Be="./index.d.ts",Ve={presta:"./bin.js"},ze=["utils","runtime","bin.js","index.js","html.js","serialize.js","bin.d.ts","index.d.ts","core.d.ts","html.d.ts","serialize.d.ts"],qe={build:`node scripts/build && tsc --emitDeclarationOnly && echo '
\u26A1\uFE0E Types generated'`,test:"c8 uvu -r esbuild-register lib/__tests__ -i ^_ && pnpm typecheck && echo '\u26A1\uFE0E Types checked'",cloc:"pnpm dlx cloc './lib/*.ts'",typecheck:"tsc --noEmit"},Ae={type:"git",url:"git+ssh://git@github.com/sure-thing/presta.git"},Ie="estrattonbailey",Qe="MIT",Ue={url:"https://github.com/sure-thing/presta/issues"},Je="https://github.com/sure-thing/presta#readme",Ne={chokidar:"^3.4.3","deep-extend":"^0.6.0",deepmerge:"^4.2.2",dotenv:"^10.0.0",esbuild:"^0.12.28","esbuild-register":"^2.6.0",filewatcher:"^3.0.1","fs-extra":"^9.0.1","get-port":"^5.1.1",kleur:"^4.1.4","lambda-types":"^1.0.0","mime-types":"^2.1.31","module-alias":"^2.2.2",ms:"^2.1.2",picomatch:"^2.3.0","query-string":"^6.14.1","raw-body":"^2.4.1",regexparam:"^1.3.0","route-sort":"^1.0.0",sade:"^1.7.3",sirv:"^1.0.7",smitter:"^1.1.1",statues:"^1.0.0-alpha1",statuses:"^2.0.1","tiny-glob":"^0.2.9","watch-dependency-graph":"^3.0.1",ws:"^8.4.0"},We={"@netlify/functions":"^0.7.2","@types/deep-extend":"^0.4.32","@types/fs-extra":"^9.0.12","@types/mime-types":"^2.1.0","@types/module-alias":"^2.0.1","@types/node":"^18.6.3","@types/picomatch":"^2.2.4","@types/sade":"^1.7.3","@types/statuses":"^2.0.0","@types/ws":"^8.2.2",c8:"^7.11.0",proxyquire:"^2.1.3","supertest-fetch":"^1.4.3",typescript:"^4.5.2",uvu:"^0.5.6"},W={name:He,version:$e,description:Me,main:Te,types:Be,bin:Ve,files:ze,scripts:qe,repository:Ae,author:Ie,license:Qe,bugs:Ue,homepage:Je,dependencies:Ne,devDependencies:We};var le=l(require("http")),ce=l(require("regexparam")),pe=l(require("statuses")),ue=l(require("ws")),d=l(require("path")),de=l(require("get-port")),me=l(require("dotenv")),fe=l(require("module-alias")),c=l(require("fs-extra")),ge=l(require("tiny-glob/sync")),M=l(require("mime-types")),he=l(require("watch-dependency-graph")),T=l(require("chokidar")),ve=l(require("picomatch")),ye=l(require("esbuild")),A=l(require("smitter")),B=l(require("kleur")),be=l(require("route-sort"));function E(t){return delete require.cache[t],require(t)}function x(){let t=process.hrtime();return()=>{let[e,s]=process.hrtime(t),r=s/1e6;return e<1?(r>=1?r.toFixed(0):r.toFixed(2))+"ms":e+"."+r.toFixed(0)+"s"}}function G(t){for(var e=5381,s=t.length;s;)e=e*33^t.charCodeAt(--s);return(e>>>0).toString(36)}var K=l(require("url")),Y=l(require("raw-body")),ee=l(require("mime-types"));var Z=l(require("query-string"));function _(t){let e=(0,Z.parse)(t,{arrayFormat:"comma"}),s={},r={};for(let o of Object.keys(e)){let i=e[o];Array.isArray(i)?r[o]=i:i&&(s[o]=i)}return{queryStringParameters:s,multiValueQueryStringParameters:r}}var Ge=/image|audio|video|application\/pdf|application\/zip|applicaton\/octet-stream/i;function O(t){return Boolean(t)&&Ge.test(t)}function P(t){var i,n;let e=t.rawQuery||t.path.split("?")[1],{queryStringParameters:s,multiValueQueryStringParameters:r}=_(e),o=(n=t.isBase64Encoded)!=null?n:O(((i=t==null?void 0:t.headers)==null?void 0:i["content-type"])||"");return{rawUrl:t.rawUrl||t.path,rawQuery:e,path:t.path,httpMethod:t.httpMethod||"GET",headers:t.headers||{},multiValueHeaders:t.multiValueHeaders||{},queryStringParameters:t.queryStringParameters||s,multiValueQueryStringParameters:t.multiValueQueryStringParameters||r,pathParameters:t.pathParameters||{},body:t.body||null,isBase64Encoded:o!=null?o:!1,requestContext:t.requestContext||{},resource:t.resource||""}}function X(t){let e={},s={};for(let r of Object.keys(t)){let o=r.toLowerCase(),i=t[r];!i||(Array.isArray(i)?s[o]=i:e[o]=i)}return{headers:e,multiValueHeaders:s}}async function te(t){let{url:e="",method:s}=t,{headers:r,multiValueHeaders:o}=X(t.headers),i=O(r["content-type"]||""),a=r["content-length"]?await(0,Y.default)(t,{limit:"1mb",encoding:r["content-type"]&&ee.default.charset(r["content-type"])||!0}):void 0,p=(0,K.parse)(e).query||"",{queryStringParameters:m,multiValueQueryStringParameters:u}=_(p);return P({rawUrl:e,path:e,httpMethod:s,headers:r,multiValueHeaders:o,rawQuery:p,queryStringParameters:m,multiValueQueryStringParameters:u,body:a?Buffer.from(a).toString(i?"base64":"utf8"):null,isBase64Encoded:i,pathParameters:void 0,requestContext:{},resource:""})}var V=l(require("statuses"));function re({statusCode:t}){return`<!-- built with presta https://npm.im/presta -->
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>${t} \u2014\xA0${V.default.message[t]}</title>
        <link rel="icon" type="image/png" href="https://presta.run/favicon.png">
        <link rel="icon" type="image/svg" href="https://presta.run/favicon.svg">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;900&display=swap" rel="stylesheet"> 
        <link rel='stylesheet' href='https://unpkg.com/svbstrate@5.1.0/svbstrate.css' />
        <style>
          html,body {
            font-family: 'Inter', 'sans-serif';
            color: #23283D;
            background-color: #DADEF0;
          }
          #favicon {
            fill: #23283D;
          }
          @media (prefers-color-scheme: dark) {
            html,body {
              color: #DADEF0;
              background-color: #23283D;
            }
            #favicon {
              fill: #DADEF0;
            }
          }
        </style>
      </head>
      <body class='w f aic jcc' style='height: 100vh'>
        <div class='p12 tac'>
          <h1>${t}</h1>
          <p class='mb1'>${V.default.message[t]}</p>

          <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#a)">
              <path id="favicon" fill-rule="evenodd" clip-rule="evenodd" d="M10.4 7c-.3 0-.8.2-1 .5L1.1 22.1c-.2.3 0 .6.3.6l4 .3-2.1 2.6c-.2.3-.1.6.2.6l16.8 1.3c.4 0 .8-.2 1-.4L32 13.9c.2-.2.1-.5-.2-.5l-6.4-.5 2.2-4c.2-.3 0-.5-.3-.6L10.4 7ZM24 12.8l1.9-3.4-15.5-1.2-7.7 13.4 3.6.3 7.5-9.4c.3-.3.7-.5 1-.4l9.2.7ZM7.6 22l7.1-8.9 8.7.7-5.2 9L7.6 22Zm-1 1.1 11.6 1c.3 0 .8-.3 1-.6l5.5-9.6 5.5.5-9.7 12L5 25.2l1.7-2Z" fill="#23283D"/>
            </g>
            <defs>
              <clipPath id="a">
                <path fill="#fff" d="M0 0h32v32H0z"/>
              </clipPath>
            </defs>
          </svg>
        </div>
      </body>
    </html>
  `}var se=l(require("regexparam"));function j(t,e){let[s]=t.split("?"),r=(0,se.default)(e),o=0,i={},n=r.pattern.exec(s)||[];for(;o<r.keys.length;)i[r.keys[o]]=n[++o];return i}function k(t,e){if(e.multiValueHeaders)for(let s of Object.keys(e.multiValueHeaders))t.setHeader(s,e.multiValueHeaders[s].map(r=>String(r)));if(e.headers)for(let s of Object.keys(e.headers))t.setHeader(s,String(e.headers[s]));t.statusCode=e.statusCode,t.end(e.body)}function z(t){for(let e of Object.keys(t))t[e.toLowerCase()]=t[e]||"";return t}var L;(function(r){r.Html="text/html; charset=utf-8",r.Json="application/json; charset=utf-8",r.Xml="application/xml; charset=utf-8"})(L||(L={}));function ie(t){return typeof t=="object"?JSON.stringify(t):t}function oe(t,e){let s=e.statusCode||200,r=e.headers?z(e.headers):{};return s>299&&s<399||(r["content-type"]=t),{isBase64Encoded:e.isBase64Encoded||!1,statusCode:s,headers:r,multiValueHeaders:e.multiValueHeaders?z(e.multiValueHeaders):{},body:ie(e.body||"")}}function H(t){return oe(L.Html,t)}function ne(t){return oe(L.Json,b(y({},t),{body:ie(t.body)}))}function $(t){return typeof t=="string"?H({body:t}):b(y({},t),{statusCode:t.statusCode||200})}function ae(t){return async(e,s)=>{let r=P(e);return Object.keys(r.pathParameters||{}).length||(r.pathParameters=j(e.path,t.route)),$(await t.handler(r,s))}}var h;(function(r){r.Dev="dev",r.Build="build",r.Serve="serve"})(h||(h={}));var q=class extends Error{constructor(e,s=500){super(e);this.name="HttpError",this.statusCode=s}};var v="presta.config.js",I="presta.config.ts",Ze="./.presta",Xe="./.presta/functions",Ke="./.presta/static";function Ye({port:t}){return`
    <script>
      (function (global) {
        var socket = new WebSocket('ws://localhost:${t}');

        socket.addEventListener('open', function (event) {
          console.log('[presta] connected on port ${t}')
        });

        socket.addEventListener('message', function (event) {
          console.log(\`'[presta] received \${event.data}\`)
          if (event.data === 'refresh') {
            global.location.reload();
          }
        });

        socket.addEventListener('close', function () {
          console.log('[presta] disconnected')
        });
      })(this);
    <\/script>
  `}function et(t,e){return t.replace(e,"").split(".").reverse().slice(1).reverse().join("-").split("/").filter(Boolean).join("-")}function tt(t){let e=Object.values(t);return(0,be.default)(e.map(r=>r.route)).reduce((r,o)=>{let i=e.find(n=>n.route===o);return i?b(y({},r),{[i.src]:i}):r},{})}function R(t){var e,s,r;if(t)return(e=E(d.default.resolve(t)))==null?void 0:e.default;try{return(s=E(d.default.resolve(v)))==null?void 0:s.default}catch(o){if(c.default.existsSync(v))throw o;try{return(r=E(d.default.resolve(I)))==null?void 0:r.default}catch(i){if(c.default.existsSync(I))throw i}}return{}}function w(t,e={}){var o,i,n;let r={cwd:t.cwd||process.cwd(),files:t.files||[],assets:t.assets||"public",plugins:t.plugins||[],port:t.port||4e3,serve:(o=t.serve)!=null?o:!0,debug:!!t.debug,__unsafe_bundle_everything:(i=t.__unsafe_bundle_everything)!=null?i:!1,rawCliArgs:e};return((n=e._)==null?void 0:n.length)&&(r.files=e._),e.assets&&(r.assets=e.assets),e.port&&(r.port=e.port),e.serve&&(r.serve=e.serve==="true"),e.debug&&(r.debug=e.debug===!0),r.files&&(r.files=[].concat(r.files).map(a=>d.default.resolve(r.cwd,a))),r.assets&&(r.assets=d.default.resolve(r.cwd,r.assets)),r}function rt(t,e="html"){return d.default.extname(t)?t:e==="html"?`${t}/index.html`:`${t}.${e}`}function st(t){let e=((t==null?void 0:t.headers)||{})["content-type"];return M.default.extension(e)||"html"}function it(t,e){let s=Object.entries(e.functions).map(([r,{route:o}])=>({matcher:(0,ce.default)(o),file:r})).filter(({matcher:r})=>r.pattern.test(t.split("?")[0])).map(({file:r})=>r)[0];return{filepath:s,exports:s?E(s):void 0}}var C=class{constructor(e){this.cwd=process.cwd();this.mode=h.Dev;this.debug=!1;this.manifest={statics:{},functions:{}};this.files=[];this.events={internal:(0,A.smitter)(),external:(0,A.smitter)()};this.liveReloadScript="";this.cwd=e.cwd||process.cwd(),(0,me.config)({path:d.default.join(this.cwd,".env")}),(0,fe.addAliases)({"@":this.cwd}),this.config=w(e),this.debug=!!this.config.debug,this.logger={debug:(s,r)=>this._log("debug",s,r),info:(s,r)=>this._log("info",s,r),warn:(s,r)=>this._log("warn",s,r),error:(s,r)=>this._log("error",s,r)},this.logger.debug(`initialized with config ${JSON.stringify(e,null,"  ")}`)}async build(){if(this.mode=h.Build,this._init(),!this.files.length){this.logger.warn("no files were found, nothing to build");return}let e=x(),s=require(d.default.join(this.cwd,"package.json"));await c.default.remove(this.staticOutputDir),await c.default.remove(this.functionsOutputDir),c.default.existsSync(this.config.assets)&&await c.default.copy(this.config.assets,this.staticOutputDir),await this.buildFiles(this.files),await(0,ye.build)({entryPoints:Object.values(this.manifest.functions).map(({dest:r})=>r),outdir:this.functionsOutputDir,platform:"node",target:["node12"],minify:!0,allowOverwrite:!0,external:this.config.__unsafe_bundle_everything?[]:Object.keys(s.dependencies||{}),bundle:!0,define:{"process.env.PRESTA_SERVERLESS_RUNTIME":"true"}}),this.logger.info("presta build complete",{duration:e()}),this.events.external.emit("buildComplete")}async dev(){this.mode=h.Dev,this._init(),this.config.serve&&(await this._getPort(),this.liveReloadScript=this.config.serve?Ye({port:this.port}):"");let e=!1,s=await this._initDev(),r=async()=>{if(!e){e=!0;try{await s.cleanup(),this.debug||console.clear(),this.logger.info("\u267A restarting"),this.config=w(R(this.config.rawCliArgs.config),this.config.rawCliArgs),this._init(),s=await this._initDev(),this.events.internal.emit("devServerRestarted")}catch(i){this.logger.error(i)}e=!1}},o=T.default.watch([this.config.rawCliArgs.config&&d.default.resolve(this.config.rawCliArgs.config),v,I].filter(Boolean),{ignoreInitial:!0}).on("all",r);return this.events.internal.on("requestRestartDevServer",r),{async cleanup(){await s.cleanup(),await o.close()}}}serve(){this.mode=h.Serve,this._init(),this._serve()}restartDevServer(){if(this.mode!==h.Dev)throw new Error(`Requested a dev server restart in ${this.mode} mode`);this.events.internal.emit("requestRestartDevServer")}async buildFile(e){try{let{route:s,getStaticPaths:r,handler:o}=require(e);if(r){let i=await r(),n=[],a=this.manifest.statics[e]||[];if(!i.length){for(let p of a)await c.default.remove(p);this.manifest.statics[e]=[],this.logger.debug(`no built files detected, removing all previous artifacts for ${e}`);return}for(let p of i){let m=x(),u=P({path:p,pathParameters:s?j(p,s):{}}),f=$(await o(u,{})),S=((f==null?void 0:f.headers)||{})["content-type"],we=M.default.extension(S)||"html",Se=rt(p,we),Ee=f.body,Q=d.default.join(this.staticOutputDir,Se);c.default.outputFileSync(Q,Ee,"utf-8"),n.push(Q),this.logger.info(`\u25CF ${p}`,{duration:m()})}for(let p of a)n.includes(p)||(await c.default.remove(p),this.logger.debug(`detected removed file, cleaning up ${e}`));this.manifest.statics[e]=n}if(s){let i=x(),n=et(e,this.cwd),a="";this.mode===h.Build&&(a=d.default.join(this.functionsOutputDir,this.mode===h.Build?n+"-"+G(c.default.readFileSync(e,"utf8"))+".js":n+".js"),c.default.outputFileSync(a,`import { wrapHandler } from 'presta/runtime/wrapHandler';
import * as file from '${e}';
const mod = Object.assign({ config: {} }, file)
export const route = mod.route
export const config = mod.config
export const handler = wrapHandler(mod)`)),this.manifest.functions=tt(b(y({},this.manifest.functions),{[e]:{route:s,src:e,dest:a}})),this.logger.info(`\u03BB ${s}`,{duration:i()})}this._commitManifestToFile()}catch(s){this.logger.error(s)}}async buildFiles(e){await Promise.all(e.map(s=>this.buildFile(s)))}_init(){var e;((e=this.plugins)==null?void 0:e.length)&&this.plugins.forEach(s=>{s.cleanup&&(this._log("debug",`cleaning up ${s.name} plugin`),s.cleanup())}),this.prestaOutputDir=d.default.join(this.cwd,Ze),this.staticOutputDir=d.default.join(this.cwd,Ke),this.functionsOutputDir=d.default.join(this.cwd,Xe),this.manifestFilepath=d.default.join(this.prestaOutputDir,"manifest.json"),this.files=[].concat(this.config.files).map(s=>(0,ge.default)(s)).flat().map(s=>d.default.resolve(this.cwd,s)),this.plugins=this.config.plugins.map(s=>{let r=s({mode:this.mode,cwd:this.cwd,events:{on:this.events.external.on},logger:this.logger,getManifest:()=>this.manifest,getOutputDir:()=>this.prestaOutputDir,getStaticOutputDir:()=>this.staticOutputDir,getFunctionsOutputDir:()=>this.functionsOutputDir,restartDevServer:this.restartDevServer.bind(this)});return this.logger.debug(`${r.name} initialized`),r}),this.logger.debug(`presta start
${JSON.stringify(this,null,"  ")}`)}async _serve(){this.mode===h.Serve&&await this._getPort(),this.logger.info(`\u26A1\uFE0Ehttp://localhost:${this.port}`);let e=le.default.createServer((n,a)=>this._httpServerHandler(n,a)).listen(this.port),s=new ue.WebSocketServer({server:e}),r=[];e.on("connection",n=>{r.push(n),n.on("close",()=>r.splice(r.indexOf(n),1))});let o=()=>{this.logger.debug("refreshing browser"),s.clients.forEach(n=>n.send("refresh"))},i=[this.events.internal.on("devServerRestarted",()=>o()),this.events.internal.on("devFileAdded",()=>o()),this.events.internal.on("devFileRemoved",()=>o()),this.events.internal.on("devFileChanged",()=>o())];return{cleanup(){return new Promise(n=>{i.map(a=>a()),e.close(()=>n(1)),r.forEach(a=>a.destroy())})}}}_log(e,s,{duration:r}={}){if(!this.debug&&e==="debug")return;let i=B.default[{debug:"magenta",info:"reset",warn:"yellow",error:"red"}[e]];console[e]([B.default.gray(this.mode),i(String(s)),r&&`${B.default.gray(r)}`].filter(Boolean).join(" ")),e==="error"&&s instanceof Error&&console.error(s)}async _initDev(){let e=(0,he.create)({alias:{"@":this.cwd}}),s=T.default.watch(this.cwd,{ignoreInitial:!0,ignored:[this.staticOutputDir,this.functionsOutputDir,this.config.assets]}),r,o;return this.config.serve&&(r=await this._serve(),o=T.default.watch(this.config.assets,{ignoreInitial:!0}).on("all",(i,n)=>{this.logger.debug(`static asset ${n} changed`),this.events.internal.emit("devFileChanged")})),e.onChange(async i=>{this.logger.debug(`file ${i[0]} changed`),await this.buildFiles(i),this.events.internal.emit("devFileChanged")}),e.onRemove(async([i])=>{this.logger.debug(`file ${i} was removed`),this.files.splice(this.files.indexOf(i),1);let n=this.manifest.statics[i]||[],a=this.manifest.functions[i],p=n.map(m=>c.default.remove(m));a&&p.push(c.default.remove(a.dest)),await Promise.all(p),delete this.manifest.statics[i],delete this.manifest.functions[i],this.events.internal.emit("devFileRemoved")}),e.onError(i=>{this.logger.error(typeof i=="string"?new Error(i):i)}),await e.add(this.files),s.on("add",async i=>{!c.default.existsSync(i)||c.default.lstatSync(i).isDirectory()||!(0,ve.default)(this.config.files)(i)||this.files.includes(i)||(this.logger.debug(`${i} added`),this.files.push(i),await e.add(i),await this.buildFile(i),this.events.internal.emit("devFileAdded"))}),await c.default.remove(this.staticOutputDir),await c.default.remove(this.functionsOutputDir),await this.buildFiles(this.files),{async cleanup(){await Promise.all([e.close(),s.close(),o&&o.close(),r&&r.cleanup()].filter(Boolean))}}}async _getPort(){let e=this.config.port||4e3;this.port=await(0,de.default)({port:e}),this.port!==e&&this.logger.debug(`desired port ${e} not available, assigning ${this.port}`)}async _commitManifestToFile(){return c.default.outputFileSync(this.manifestFilepath,JSON.stringify(this.manifest,null,"  "))}async _httpServerHandler(e,s){let r=x();this.logger.debug(`handling ${e.url}`),this._httpTryServeFile(e,s,async o=>{o?this.logger.info(`\u26A1\uFE0E${e.url} ${s.statusCode}`,{duration:r()}):await this._httpTryServeLambda(e,s)})}async _httpTryServeFile(e,s,r){let{pathname:o}=new URL(e.url,"https://presta.dev"),i=M.default.lookup(o)||"text/html",n=i==="text/html",a=d.default.join(this.config.assets,o),p=d.default.join(this.staticOutputDir,o),m=!1,u=[a,p,d.default.join(a,"index.html"),d.default.join(p,"index.html")];for(let f of u)if(this.logger.debug(`attempting to serve ${f} as ${i}`),c.default.existsSync(f)){if(c.default.statSync(f).isDirectory())continue;if(s.writeHead(200,{"content-type":i}),n){let S=c.default.readFileSync(f,"utf8");S+=this.liveReloadScript,s.end(S)}else c.default.createReadStream(f).pipe(s);m=!0;break}r(m)}async _httpTryServeLambda(e,s){var a;let r=x(),o=await te(e),i=o.headers.Accept||o.headers.accept,n=i&&i.includes("json");this.logger.debug(`handling function request ${o.path}`);try{let{filepath:p,exports:m}=it(o.path,this.manifest);if(!m){this.logger.error(`\u26A1\uFE0E${o.path} ${404}`,{duration:r()}),k(s,{statusCode:404});return}if(!m.handler)throw new q(`file ${p} does not export a \`handler\``,404);let u=await ae(m)(o,{}),f=u.statusCode>299&&u.statusCode<399;(f?void 0:st(u))==="html"&&(u.body=(u.body||"").split("</body>")[0]+this.liveReloadScript),k(s,u),this.logger.info(`\u26A1\uFE0E${f&&((a=u==null?void 0:u.headers)==null?void 0:a.Location)||o.path} ${u.statusCode}`,{duration:r()})}catch(p){let m=p,{statusCode:u=500}=m;u>499&&this.logger.error(m);let f=n?ne({statusCode:u,body:{detail:pe.default.message[u]}}):H({statusCode:u,body:re({statusCode:u})});this.logger.error(m),this.logger.error(`\u26A1\uFE0E${o.path} ${f.statusCode}`,{duration:r()}),k(s,f)}}};(0,Pe.register)();var D=(0,xe.default)("presta");D.version(W.version).option("--config, -c",`Path to a config file.  (default ${v})`).option("--staticOutputDir","Specify output directory for built static files.  (default ./.presta/static/)").option("--functionsOutputDir","Specify output directory for built serverless functions.  (default ./.presta/functions/)").option("--assets, -a","Specify static asset directory.  (default ./public)").option("--debug, -d","Enable debug mode (prints more logs)").example("dev index.jsx -o dist").example("dev 'pages/*.tsx' -o static").example("'pages/*.tsx'").example("-c site.json").example("serve -p 8080");D.command("build","Build project to output directory.",{default:!0}).example("").example("files/**/*.js").example(`-c ${v}`).action(async t=>{process.env.PRESTA_ENV="Production",process.env.PRESTA_DEBUG=t.debug?"debug":"",console.clear();let e=w(R(t.config),t);await new C(e).build()});D.command("dev","Start Presta dev server and watch files",{alias:"watch"}).option("--port, -p","Port to run the local server.  (default 4000)").option("--serve, -s","Run local dev server.  (default true)").describe("Watch project and build to output directory.").example("dev").example("dev ./files/**/*.js").example("dev ./files/**/*.js -o ./out").example(`dev -c ${v}`).action(async t=>{process.env.PRESTA_ENV="Development",process.env.PRESTA_DEBUG=t.debug?"debug":"",console.clear();let e=w(R(t.config),t);new C(e).dev()});D.command("serve").option("--port, -p","Port to run the local server.  (default 4000)").describe("Serve built files, lambdas, and static assets.").example("serve").example("serve -o ./out -p 8080").example(`serve -c ${v}`).action(async t=>{process.env.PRESTA_ENV="Development",process.env.PRESTA_DEBUG=t.debug?"debug":"",console.clear();let e=w(R(t.config),t);new C(e).serve()});D.parse(process.argv);
//# sourceMappingURL=data:application/json;base64,
