export declare type EventMap = Record<string, any>;
export declare type EventType<T extends EventMap> = string & keyof T;
export declare type Handler<T> = (payload: T) => void;
export interface Smitter<T extends EventMap> {
    on<K extends EventType<T>>(type: K, handler: Handler<T[K]>): () => void;
    emit<K extends EventType<T>>(type: K, payload?: T[K]): void;
}
/**
 * Smitter: A small emitter.
 * @name smitter
 * @returns {Smitter}
 */
export declare let smitter: <T extends EventMap>() => Smitter<T>;
